/**
 * Metaform REST API
 * REST API for Metaform
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import localVarRequest = require('request');
import http = require('http');

/* tslint:disable:no-unused-locals */
import { BadRequest } from '../model/badRequest';
import { Forbidden } from '../model/forbidden';
import { InternalServerError } from '../model/internalServerError';
import { NotFound } from '../model/notFound';
import { Reply } from '../model/reply';

import { ObjectSerializer, Authentication, VoidAuth, Interceptor } from '../model/models';
import { HttpBasicAuth, HttpBearerAuth, ApiKeyAuth, OAuth } from '../model/models';

import { HttpError, RequestFile } from './apis';

let defaultBasePath = 'http://localhost';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum RepliesApiApiKeys {
    bearer,
}

export class RepliesApi {
    protected _basePath = defaultBasePath;
    protected _defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'bearer': new ApiKeyAuth('header', 'Authorization'),
    }

    protected interceptors: Interceptor[] = [];

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    set defaultHeaders(defaultHeaders: any) {
        this._defaultHeaders = defaultHeaders;
    }

    get defaultHeaders() {
        return this._defaultHeaders;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: RepliesApiApiKeys, value: string) {
        (this.authentications as any)[RepliesApiApiKeys[key]].apiKey = value;
    }

    public addInterceptor(interceptor: Interceptor) {
        this.interceptors.push(interceptor);
    }

    /**
     * Exports metaform data
     * @summary Exports metaform data
     * @param realmId realm id
     * @param metaformId Metaform id
     * @param format Export results in specified format (XLSX)
     */
    public async _export (realmId: string, metaformId: string, format: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Buffer;  }> {
        const localVarPath = this.basePath + '/realms/{realmId}/metaforms/{metaformId}/export'
            .replace('{' + 'realmId' + '}', encodeURIComponent(String(realmId)))
            .replace('{' + 'metaformId' + '}', encodeURIComponent(String(metaformId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json;charset=utf-8'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'realmId' is not null or undefined
        if (realmId === null || realmId === undefined) {
            throw new Error('Required parameter realmId was null or undefined when calling _export.');
        }

        // verify required parameter 'metaformId' is not null or undefined
        if (metaformId === null || metaformId === undefined) {
            throw new Error('Required parameter metaformId was null or undefined when calling _export.');
        }

        // verify required parameter 'format' is not null or undefined
        if (format === null || format === undefined) {
            throw new Error('Required parameter format was null or undefined when calling _export.');
        }

        if (format !== undefined) {
            localVarQueryParameters['format'] = ObjectSerializer.serialize(format, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            encoding: null,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.bearer.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.bearer.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Buffer;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "Buffer");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Creates new form reply
     * @summary create new form reply
     * @param reply Payload
     * @param realmId realm id
     * @param metaformId Metaform id
     * @param updateExisting specifies that existing reply should be updated. DEPRECATED, use replymode instead
     * @param replyMode specifies reply mode that will be used. possible values UPDATE, REVISION, CUMULATIVE
     */
    public async createReply (reply: Reply, realmId: string, metaformId: string, updateExisting?: boolean, replyMode?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Reply;  }> {
        const localVarPath = this.basePath + '/realms/{realmId}/metaforms/{metaformId}/replies'
            .replace('{' + 'realmId' + '}', encodeURIComponent(String(realmId)))
            .replace('{' + 'metaformId' + '}', encodeURIComponent(String(metaformId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json;charset=utf-8'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'reply' is not null or undefined
        if (reply === null || reply === undefined) {
            throw new Error('Required parameter reply was null or undefined when calling createReply.');
        }

        // verify required parameter 'realmId' is not null or undefined
        if (realmId === null || realmId === undefined) {
            throw new Error('Required parameter realmId was null or undefined when calling createReply.');
        }

        // verify required parameter 'metaformId' is not null or undefined
        if (metaformId === null || metaformId === undefined) {
            throw new Error('Required parameter metaformId was null or undefined when calling createReply.');
        }

        if (updateExisting !== undefined) {
            localVarQueryParameters['updateExisting'] = ObjectSerializer.serialize(updateExisting, "boolean");
        }

        if (replyMode !== undefined) {
            localVarQueryParameters['replyMode'] = ObjectSerializer.serialize(replyMode, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(reply, "Reply")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.bearer.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.bearer.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Reply;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "Reply");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Deletes a reply
     * @summary Deletes a reply
     * @param realmId realm id
     * @param metaformId Metaform id
     * @param replyId Reply id
     */
    public async deleteReply (realmId: string, metaformId: string, replyId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body?: any;  }> {
        const localVarPath = this.basePath + '/realms/{realmId}/metaforms/{metaformId}/replies/{replyId}'
            .replace('{' + 'realmId' + '}', encodeURIComponent(String(realmId)))
            .replace('{' + 'metaformId' + '}', encodeURIComponent(String(metaformId)))
            .replace('{' + 'replyId' + '}', encodeURIComponent(String(replyId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json;charset=utf-8'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'realmId' is not null or undefined
        if (realmId === null || realmId === undefined) {
            throw new Error('Required parameter realmId was null or undefined when calling deleteReply.');
        }

        // verify required parameter 'metaformId' is not null or undefined
        if (metaformId === null || metaformId === undefined) {
            throw new Error('Required parameter metaformId was null or undefined when calling deleteReply.');
        }

        // verify required parameter 'replyId' is not null or undefined
        if (replyId === null || replyId === undefined) {
            throw new Error('Required parameter replyId was null or undefined when calling deleteReply.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.bearer.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.bearer.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Finds single reply by id
     * @summary Find a single reply
     * @param realmId realm id
     * @param metaformId Metaform id
     * @param replyId Reply id
     */
    public async findReply (realmId: string, metaformId: string, replyId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Reply;  }> {
        const localVarPath = this.basePath + '/realms/{realmId}/metaforms/{metaformId}/replies/{replyId}'
            .replace('{' + 'realmId' + '}', encodeURIComponent(String(realmId)))
            .replace('{' + 'metaformId' + '}', encodeURIComponent(String(metaformId)))
            .replace('{' + 'replyId' + '}', encodeURIComponent(String(replyId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json;charset=utf-8'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'realmId' is not null or undefined
        if (realmId === null || realmId === undefined) {
            throw new Error('Required parameter realmId was null or undefined when calling findReply.');
        }

        // verify required parameter 'metaformId' is not null or undefined
        if (metaformId === null || metaformId === undefined) {
            throw new Error('Required parameter metaformId was null or undefined when calling findReply.');
        }

        // verify required parameter 'replyId' is not null or undefined
        if (replyId === null || replyId === undefined) {
            throw new Error('Required parameter replyId was null or undefined when calling findReply.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.bearer.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.bearer.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Reply;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "Reply");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Lists form replies
     * @summary Lists form replies
     * @param realmId realm id
     * @param metaformId Metaform id
     * @param userId Filter results by user id. If this parameter is not specified all replies are returned, this requires logged user to have proper permission to do so
     * @param createdBefore Filter results created before specified time
     * @param createdAfter Filter results created after specified time
     * @param modifiedBefore Filter results modified before specified time
     * @param modifiedAfter Filter results modified after specified time
     * @param includeRevisions Specifies that revisions should be included into response
     * @param fields Filter results by field values. Format is field:value, multiple values can be added by using comma separator. E.g. field1&#x3D;value,field2&#x3D;another
     * @param firstResult First index of results to be returned
     * @param maxResults How many items to return at one time
     */
    public async listReplies (realmId: string, metaformId: string, userId?: string, createdBefore?: string, createdAfter?: string, modifiedBefore?: string, modifiedAfter?: string, includeRevisions?: boolean, fields?: Array<string>, firstResult?: number, maxResults?: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Array<Reply>;  }> {
        const localVarPath = this.basePath + '/realms/{realmId}/metaforms/{metaformId}/replies'
            .replace('{' + 'realmId' + '}', encodeURIComponent(String(realmId)))
            .replace('{' + 'metaformId' + '}', encodeURIComponent(String(metaformId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json;charset=utf-8'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'realmId' is not null or undefined
        if (realmId === null || realmId === undefined) {
            throw new Error('Required parameter realmId was null or undefined when calling listReplies.');
        }

        // verify required parameter 'metaformId' is not null or undefined
        if (metaformId === null || metaformId === undefined) {
            throw new Error('Required parameter metaformId was null or undefined when calling listReplies.');
        }

        if (userId !== undefined) {
            localVarQueryParameters['userId'] = ObjectSerializer.serialize(userId, "string");
        }

        if (createdBefore !== undefined) {
            localVarQueryParameters['createdBefore'] = ObjectSerializer.serialize(createdBefore, "string");
        }

        if (createdAfter !== undefined) {
            localVarQueryParameters['createdAfter'] = ObjectSerializer.serialize(createdAfter, "string");
        }

        if (modifiedBefore !== undefined) {
            localVarQueryParameters['modifiedBefore'] = ObjectSerializer.serialize(modifiedBefore, "string");
        }

        if (modifiedAfter !== undefined) {
            localVarQueryParameters['modifiedAfter'] = ObjectSerializer.serialize(modifiedAfter, "string");
        }

        if (includeRevisions !== undefined) {
            localVarQueryParameters['includeRevisions'] = ObjectSerializer.serialize(includeRevisions, "boolean");
        }

        if (fields !== undefined) {
            localVarQueryParameters['fields'] = ObjectSerializer.serialize(fields, "Array<string>");
        }

        if (firstResult !== undefined) {
            localVarQueryParameters['firstResult'] = ObjectSerializer.serialize(firstResult, "number");
        }

        if (maxResults !== undefined) {
            localVarQueryParameters['maxResults'] = ObjectSerializer.serialize(maxResults, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.bearer.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.bearer.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Array<Reply>;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "Array<Reply>");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Exports reply data
     * @summary Exports reply data
     * @param realmId realm id
     * @param metaformId Metaform id
     * @param replyId Reply id
     * @param format Export results in specified format (PDF)
     */
    public async replyExport (realmId: string, metaformId: string, replyId: string, format: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Buffer;  }> {
        const localVarPath = this.basePath + '/realms/{realmId}/metaforms/{metaformId}/replies/{replyId}/export'
            .replace('{' + 'realmId' + '}', encodeURIComponent(String(realmId)))
            .replace('{' + 'metaformId' + '}', encodeURIComponent(String(metaformId)))
            .replace('{' + 'replyId' + '}', encodeURIComponent(String(replyId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json;charset=utf-8'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'realmId' is not null or undefined
        if (realmId === null || realmId === undefined) {
            throw new Error('Required parameter realmId was null or undefined when calling replyExport.');
        }

        // verify required parameter 'metaformId' is not null or undefined
        if (metaformId === null || metaformId === undefined) {
            throw new Error('Required parameter metaformId was null or undefined when calling replyExport.');
        }

        // verify required parameter 'replyId' is not null or undefined
        if (replyId === null || replyId === undefined) {
            throw new Error('Required parameter replyId was null or undefined when calling replyExport.');
        }

        // verify required parameter 'format' is not null or undefined
        if (format === null || format === undefined) {
            throw new Error('Required parameter format was null or undefined when calling replyExport.');
        }

        if (format !== undefined) {
            localVarQueryParameters['format'] = ObjectSerializer.serialize(format, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            encoding: null,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.bearer.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.bearer.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Buffer;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "Buffer");
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Updates reply
     * @summary Updates reply
     * @param reply Payload
     * @param realmId realm id
     * @param metaformId Metaform id
     * @param replyId Reply id
     */
    public async updateReply (reply: Reply, realmId: string, metaformId: string, replyId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body?: any;  }> {
        const localVarPath = this.basePath + '/realms/{realmId}/metaforms/{metaformId}/replies/{replyId}'
            .replace('{' + 'realmId' + '}', encodeURIComponent(String(realmId)))
            .replace('{' + 'metaformId' + '}', encodeURIComponent(String(metaformId)))
            .replace('{' + 'replyId' + '}', encodeURIComponent(String(replyId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json;charset=utf-8'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'reply' is not null or undefined
        if (reply === null || reply === undefined) {
            throw new Error('Required parameter reply was null or undefined when calling updateReply.');
        }

        // verify required parameter 'realmId' is not null or undefined
        if (realmId === null || realmId === undefined) {
            throw new Error('Required parameter realmId was null or undefined when calling updateReply.');
        }

        // verify required parameter 'metaformId' is not null or undefined
        if (metaformId === null || metaformId === undefined) {
            throw new Error('Required parameter metaformId was null or undefined when calling updateReply.');
        }

        // verify required parameter 'replyId' is not null or undefined
        if (replyId === null || replyId === undefined) {
            throw new Error('Required parameter replyId was null or undefined when calling updateReply.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(reply, "Reply")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.bearer.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.bearer.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
}
